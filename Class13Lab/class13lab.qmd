---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Yerin Go A16272901"
format: pdf
editor: visual
---
In today's calss we will explore and analyze data from a published RNA-seq experiment where airway smooth muscles celles were treated with dexamthasone, a synthetic glucocorticoid steriod with anti-inflammatory effects... 

##Import countdata and coldata 

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```
```{r}
head(metadata)
```
>. Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```
There are 38694 genes in the dataset. 


>. Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex=="control")
```
There are 4 'control' cell lines. 

##Toy differential gene expression 
Time to do some analysis: 
We have 4 control and 4 treated samples/experiments/columns. 
We need to make sure the metadata ID column matches the columns in our count data. 
```{r}
colnames(counts)
```

```{r}
metadata$id
```
```{r}
all(colnames(counts)==metadata$id)
```
To check that all elements of a vector are true we can use the `all()` function. 
```{r}
all(c(T,T,T))
all(c(T,T,T,F))
```

To start, I will calculate the `control`.means and the `treated`.mean values and compare them. 
- Identify and extract the `control` only columns 
- Determine the mean value for each gene (i.e row)
- Do the same ^ for `treated`. 
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```
```{r}
#Where does it tell me which columns are control? 
control.inds <- metadata$dex == "control"
control.counts <- counts[, control.inds]
control.mean <- apply(control.counts, 1, mean)
```
Do the same for the treated sample to get: `treated,mean` 
>. Q4.  Follow the same procedure for the treated samples 

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[,treated$id]
treated.mean <- rowSums( treated.counts )/4 
head(treated.mean)
```
>. Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

>. Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.
Let's store these together for ease of bookkeeping.

```{r}
meancounts <- data.frame(control.mean,treated.mean)
```
```{r}
plot(meancounts)
```
This data is screaming at us to log transform as it is so heavely skewed and over such a wide range. 

```{r}
plot(meancounts, log="xy")
```
I want to compare the treated and the control values here and we will use Fold change in log2 units to do this. log2(Treated/control) 
```{r}
log2fc<- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

A common rule of thumb cutt-off for calling a gene "differentially expressed" is a log2 fold-change value of  > +2 or > -2 for "up regulated" and "down regulated" respectively. 
```{r}
head(meancounts)
```
```{r}
sum(meancounts$log2fc > +2, na.rm=T)
```
We first need to remove the zero count genes- as we can say anything about these genes anyway and their division of log value are messing things up (divide by zero) or the -infinity log problem. 

```{r}
to.rm.ind <- rowSums(meancounts[,1:2]==0) >0 
mycounts<- meancounts[!to.rm.ind,]
```

 
```{r}
up.ind <- mycounts$log2fc > 2 
down.ind <- mycounts$log2fc > -2 
```



>. Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```


>. Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```


>. Q10. Do you trust these results? Why or why not?

No, we are missing stats. Are these differences significant? 

##DESeq Analysis 
Let us do this properly with the help DESeq2 package 

```{r}
#| message: false 
library(DESeq2) 
```

We have to use a specific data object for working with DESeq 
```{r}
dds<- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```
Run our main analysis with the `DESeq()` function 
```{r}
dds <- DESeq(dds)
```
To get the results out of our `dds` object we can use the DESeq function called `results()` 
```{r}
res <- results(dds)
head(res)
```
## Volcano Plot 
A very common and useful summary figure from this type of analysis is called a volcano plot- a plot of log2FC vs. P-value We use this `padj` the adjusted P-value to multiple testing. 


```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj))
```
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```
Add some color: 
```{r}

mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )


abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

## Add Annotation Data

```{r}
head(res)
```
```{r}
BiocManager::install("AnnotationDbi")
BiocManager::install("org.Hs.eg.db")
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",        
                     column="SYMBOL",          
                     multiVals="first")
```
```{r}
head(res)
```
```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")
```
```{r}
res$name <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")
```
```{r}
head(res)
```

##Pathway Analysis 

Now that I have added the necessary annotation data, I can talk to different data bases that use these IDs. 

We will use the `gage` package to do gene analysis (aka pathway analysis, geneset enrichment, overlap analysis)

```{r}
library(pathview)
library(gage)
library(gageData)
```
We will use KEGG first ()
```{r}
data("kegg.sets.hs")
head(kegg.sets.hs, 2)
```
The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs. 

```{r}
foldchange <- res$log2FoldChange
names(foldchange) <- res$entrez
head(foldchange)
```
Run the analysis

```{r}
# Get the results
keggres = gage(foldchange, gsets=kegg.sets.hs)
```

Let us look at our result here: 
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
attributes(keggres)
```
```{r}
head(keggres$less,3)
```
I can now use the returned pathway IDs from KEGG as input to the `pathview` package to make pathway figures with our DEGs highlighted. 

```{r}
pathview(gene.data=foldchange, pathway.id="hsa05310")
```

![](hsa05310.png)

